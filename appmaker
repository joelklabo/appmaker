#!/bin/bash

# AppMaker - Automated iOS/macOS App Generator
# Based on patterns from ViceChips and Prompt projects

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
TEMPLATES_DIR="${SCRIPT_DIR}/templates"

# Default values
DEFAULT_BUNDLE_PREFIX="com.example"
DEFAULT_ORG="MyOrganization"
DEFAULT_AUTHOR="Developer"

# Functions
print_banner() {
    echo -e "${BLUE}"
    echo "╔═══════════════════════════════════════╗"
    echo "║          AppMaker v1.0                ║"
    echo "║   iOS/macOS App Generator             ║"
    echo "╚═══════════════════════════════════════╝"
    echo -e "${NC}"
}

print_help() {
    echo "Usage: appmaker [command] [options]"
    echo ""
    echo "Commands:"
    echo "  new <name>          Create a new app project"
    echo "  init                Initialize AppMaker in current directory"
    echo "  validate            Validate appmaker.config.yaml"
    echo "  list-templates      List available templates"
    echo ""
    echo "Options:"
    echo "  --config <file>     Use custom config file (default: appmaker.config.yaml)"
    echo "  --template <name>   Use specific template"
    echo "  --platform <list>   Platforms (ios,macos)"
    echo "  --features <list>   Features to enable"
    echo "  --dry-run          Show what would be created"
    echo ""
    echo "Examples:"
    echo "  appmaker new MyApp"
    echo "  appmaker new MyApp --platform=ios --features=cloudkit,ai"
    echo "  appmaker new MyApp --template=prompt-style"
}

validate_requirements() {
    echo -e "${YELLOW}Checking requirements...${NC}"
    
    local missing=0
    
    # Check for required tools
    for tool in xcodegen swiftlint swift-format; do
        if ! command -v $tool &> /dev/null; then
            echo -e "${RED}✗ $tool not found${NC}"
            missing=1
        else
            echo -e "${GREEN}✓ $tool${NC}"
        fi
    done
    
    if [ $missing -eq 1 ]; then
        echo -e "${RED}Missing requirements. Run: brew install xcodegen swiftlint swift-format${NC}"
        exit 1
    fi
}

create_project_structure() {
    local app_name=$1
    local project_dir=$2
    
    echo -e "${BLUE}Creating project structure...${NC}"
    
    # Create main directories
    mkdir -p "${project_dir}/${app_name}"
    mkdir -p "${project_dir}/${app_name}/Assets.xcassets"
    mkdir -p "${project_dir}/${app_name}/Views"
    mkdir -p "${project_dir}/${app_name}/Preview Content"
    
    mkdir -p "${project_dir}/Packages/${app_name}Kit/Sources"
    mkdir -p "${project_dir}/Packages/${app_name}Kit/Tests"
    
    mkdir -p "${project_dir}/Tests"
    mkdir -p "${project_dir}/ci_scripts"
    mkdir -p "${project_dir}/scripts"
    
    echo -e "${GREEN}✓ Project structure created${NC}"
}

copy_template_files() {
    local template=$1
    local project_dir=$2
    local app_name=$3
    
    echo -e "${BLUE}Copying template files...${NC}"
    
    # Copy base template files
    cp -r "${TEMPLATES_DIR}/base/"* "${project_dir}/" 2>/dev/null || true
    
    # Copy specific template if requested
    if [ -n "$template" ] && [ -d "${TEMPLATES_DIR}/${template}" ]; then
        cp -r "${TEMPLATES_DIR}/${template}/"* "${project_dir}/" 2>/dev/null || true
    fi
    
    echo -e "${GREEN}✓ Template files copied${NC}"
}

process_templates() {
    local project_dir=$1
    local app_name=$2
    local bundle_prefix=$3
    local organization=$4
    local author=$5
    
    echo -e "${BLUE}Processing templates...${NC}"
    
    # Find and replace template variables
    find "$project_dir" -type f \( -name "*.swift" -o -name "*.yml" -o -name "*.yaml" -o -name "*.md" -o -name "Makefile" -o -name "*.sh" \) -exec sed -i '' \
        -e "s/\${APP_NAME}/${app_name}/g" \
        -e "s/\${BUNDLE_ID_PREFIX}/${bundle_prefix}/g" \
        -e "s/\${ORGANIZATION}/${organization}/g" \
        -e "s/\${AUTHOR}/${author}/g" \
        -e "s/\${YEAR}/$(date +%Y)/g" \
        {} \;
    
    echo -e "${GREEN}✓ Templates processed${NC}"
}

generate_project_yml() {
    local app_name=$1
    local project_dir=$2
    local config_file=$3
    
    echo -e "${BLUE}Generating project.yml...${NC}"
    
    # This would read the config and generate appropriate project.yml
    # For now, using a template
    
    echo -e "${GREEN}✓ project.yml generated${NC}"
}

create_new_app() {
    local app_name=$1
    shift
    
    # Parse additional options
    local config_file="appmaker.config.yaml"
    local template=""
    local dry_run=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --config=*)
                config_file="${1#*=}"
                shift
                ;;
            --template=*)
                template="${1#*=}"
                shift
                ;;
            --dry-run)
                dry_run=true
                shift
                ;;
            *)
                shift
                ;;
        esac
    done
    
    # Validate app name
    if [[ ! "$app_name" =~ ^[A-Za-z][A-Za-z0-9]*$ ]]; then
        echo -e "${RED}Error: App name must start with a letter and contain only letters and numbers${NC}"
        exit 1
    fi
    
    # Set project directory
    local project_dir="./${app_name}"
    
    if [ -d "$project_dir" ]; then
        echo -e "${RED}Error: Directory ${project_dir} already exists${NC}"
        exit 1
    fi
    
    if [ "$dry_run" = true ]; then
        echo -e "${YELLOW}Dry run mode - no files will be created${NC}"
        echo "Would create: ${project_dir}"
        return
    fi
    
    # Create project
    echo -e "${GREEN}Creating new app: ${app_name}${NC}"
    
    # Read config values (simplified for now)
    local bundle_prefix="${BUNDLE_ID_PREFIX:-$DEFAULT_BUNDLE_PREFIX}"
    local organization="${ORGANIZATION:-$DEFAULT_ORG}"
    local author="${AUTHOR:-$DEFAULT_AUTHOR}"
    
    # Create project structure
    create_project_structure "$app_name" "$project_dir"
    
    # Copy template files
    copy_template_files "$template" "$project_dir" "$app_name"
    
    # Process templates
    process_templates "$project_dir" "$app_name" "$bundle_prefix" "$organization" "$author"
    
    # Generate project.yml
    generate_project_yml "$app_name" "$project_dir" "$config_file"
    
    echo -e "${GREEN}✅ App created successfully!${NC}"
    echo ""
    echo "Next steps:"
    echo "  cd ${app_name}"
    echo "  make setup"
    echo "  make dev"
}

# Main script
print_banner

# Check if no arguments
if [ $# -eq 0 ]; then
    print_help
    exit 0
fi

# Parse command
case "$1" in
    new)
        if [ $# -lt 2 ]; then
            echo -e "${RED}Error: App name required${NC}"
            echo "Usage: appmaker new <name>"
            exit 1
        fi
        validate_requirements
        create_new_app "$2" "${@:3}"
        ;;
    init)
        echo "Initializing AppMaker in current directory..."
        cp "${SCRIPT_DIR}/appmaker.config.yaml" .
        echo -e "${GREEN}✓ Created appmaker.config.yaml${NC}"
        ;;
    validate)
        echo "Validating configuration..."
        # Add validation logic
        echo -e "${GREEN}✓ Configuration valid${NC}"
        ;;
    list-templates)
        echo "Available templates:"
        for template in "${TEMPLATES_DIR}"/*/; do
            if [ -d "$template" ]; then
                basename "$template"
            fi
        done
        ;;
    help|--help|-h)
        print_help
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        print_help
        exit 1
        ;;
esac