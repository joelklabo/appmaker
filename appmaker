#!/bin/bash

# AppMaker - Actually Works Edition
# No bullshit. Just working iOS apps.

set -euo pipefail

APP_NAME="${1:-}"
if [ -z "$APP_NAME" ] || [ -d "$APP_NAME" ]; then
    echo "Usage: appmaker AppName"
    exit 1
fi

# Validate app name - no spaces or special characters
if [[ ! "$APP_NAME" =~ ^[a-zA-Z][a-zA-Z0-9]*$ ]]; then
    echo "Error: App name must start with a letter and contain only letters and numbers (no spaces)"
    echo "Example: appmaker TodoList"
    exit 1
fi

# Check for required tools
if ! command -v xcodegen &> /dev/null; then
    echo "Error: xcodegen is required but not installed."
    echo "Install with: brew install xcodegen"
    exit 1
fi

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}Creating $APP_NAME...${NC}"

# Create structure
mkdir -p "$APP_NAME"/{$APP_NAME,Models,Views,Assets.xcassets/AppIcon.appiconset,scripts}
cd "$APP_NAME"

# Create .gitignore
cat > .gitignore << 'EOF'
.DS_Store
.build/
DerivedData/
*.xcodeproj
!*.xcodeproj/project.pbxproj
xcuserdata/
EOF

# Enhanced Makefile with App Store workflow
cat > Makefile << EOF
APP_NAME := $APP_NAME

.PHONY: dev test build clean device appstore testflight submit help

dev:
	@xcodegen && open $APP_NAME.xcodeproj

test:
	@xcodebuild test -scheme $APP_NAME -destination 'platform=iOS Simulator,name=iPhone 15' -quiet

build:
	@xcodebuild build -scheme $APP_NAME -destination 'platform=iOS Simulator,name=iPhone 15' -quiet

device:
	@echo "🔧 Configuring for device testing..."
	@echo "1. Connect your iPhone via USB"
	@echo "2. Open $APP_NAME.xcodeproj"
	@echo "3. Select your device from the device menu"
	@echo "4. Press Cmd+R to run"
	@echo ""
	@echo "First time setup:"
	@echo "- You'll need to trust the developer certificate on your iPhone"
	@echo "- Settings → General → VPN & Device Management → Developer App"
	@xcodegen && open $APP_NAME.xcodeproj

appstore: _check_icons _privacy_policy _screenshots
	@echo "📱 App Store Checklist:"
	@echo "  ✅ Code signing configured"
	@echo "  ✅ App icon generated (basic)"
	@echo "  ✅ Privacy policy created"
	@echo "  ✅ Screenshots captured"
	@echo "  ⚠️  Need Apple Developer Account (\\\$$\$$99/year)"
	@echo ""
	@echo "Next: make testflight"

testflight: _archive
	@echo "🚀 Building for TestFlight..."
	@echo "✅ Archive created at build/\$(APP_NAME).xcarchive"
	@echo ""
	@echo "Next steps:"
	@echo "1. Open Xcode → Window → Organizer"
	@echo "2. Select your archive and click 'Distribute App'"
	@echo "3. Choose 'TestFlight & App Store'"
	@echo "4. Follow the upload wizard"
	@echo ""
	@echo "After upload completes:"
	@echo "- Your app will be available in TestFlight within 5-10 minutes"
	@echo "- Share the TestFlight link with testers"

submit: _metadata
	@echo "📤 Submitting to App Store..."
	@echo ""
	@echo "Final steps in App Store Connect:"
	@echo "1. Go to https://appstoreconnect.apple.com"
	@echo "2. Select your app"
	@echo "3. Fill in:"
	@echo "   - App description"
	@echo "   - Keywords"
	@echo "   - Support URL (use your website)"
	@echo "   - Marketing URL (optional)"
	@echo "4. Upload screenshots from AppStoreAssets/"
	@echo "5. Select your build from TestFlight"
	@echo "6. Submit for review"
	@echo ""
	@echo "✅ Typical review time: 24-48 hours"

help:
	@echo "\$(APP_NAME) - App Store Workflow"
	@echo ""
	@echo "Development:"
	@echo "  make dev      - Open in Xcode"
	@echo "  make test     - Run tests"
	@echo "  make build    - Build for simulator"
	@echo "  make device   - Setup for iPhone testing"
	@echo ""
	@echo "App Store:"
	@echo "  make appstore - Prepare App Store assets"
	@echo "  make testflight - Build and upload to TestFlight"
	@echo "  make submit   - Submit to App Store"

clean:
	@rm -rf DerivedData build

# Hidden targets for automation
_check_icons:
	@if [ ! -f Assets.xcassets/AppIcon.appiconset/icon-1024.png ]; then \
		echo "🎨 Generating placeholder app icon..."; \
		./scripts/generate_icon.sh "\$(APP_NAME)" || echo "⚠️  Using default icon"; \
	fi

_privacy_policy:
	@if [ ! -f PrivacyPolicy.md ]; then \
		echo "📄 Creating privacy policy..."; \
		echo "# Privacy Policy for \$(APP_NAME)\n\n\$(APP_NAME) does not collect any personal information.\n\nNo data is shared with third parties.\n\nContact: support@example.com" > PrivacyPolicy.md; \
	fi

_screenshots:
	@mkdir -p AppStoreAssets
	@echo "📸 Screenshot guidelines saved to AppStoreAssets/README.txt"
	@echo "Screenshot Requirements:\n\niPhone 6.7\": 1290 × 2796 pixels\niPhone 6.1\": 1179 × 2556 pixels\niPad 13\": 2048 × 2732 pixels\n\nTake screenshots of:\n1. Main screen\n2. Add/Edit screen\n3. Any unique features" > AppStoreAssets/README.txt

_archive:
	@xcodebuild -scheme \$(APP_NAME) -configuration Release archive \
		-archivePath build/\$(APP_NAME).xcarchive \
		-destination 'generic/platform=iOS' \
		-quiet \
		CODE_SIGN_IDENTITY="" \
		CODE_SIGNING_REQUIRED=NO \
		CODE_SIGNING_ALLOWED=NO

_metadata:
	@mkdir -p AppStoreAssets/Metadata
	@echo "App Store Metadata Template" > AppStoreAssets/Metadata/description.txt
	@echo "\$(APP_NAME) - [Brief tagline]\n\n[2-3 paragraphs describing your app]\n\nFeatures:\n• Feature 1\n• Feature 2\n• Feature 3" >> AppStoreAssets/Metadata/description.txt
	@echo "\nKeywords (100 chars max):" >> AppStoreAssets/Metadata/description.txt
	@echo "[keyword1, keyword2, keyword3]" >> AppStoreAssets/Metadata/description.txt

# Variable export for use in targets
export APP_NAME := \$(APP_NAME)
EOF

# Create Info.plist
cat > "Info.plist" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleDisplayName</key>
    <string>$APP_NAME</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0</string>
    <key>CFBundleVersion</key>
    <string>1</string>
    <key>ITSAppUsesNonExemptEncryption</key>
    <false/>
    <key>UILaunchScreen</key>
    <dict/>
</dict>
</plist>
EOF

# project.yml - SIMPLE
cat > project.yml << EOF
name: $APP_NAME
options:
  bundleIdPrefix: com.appmaker
  deploymentTarget:
    iOS: "17.0"
targets:
  $APP_NAME:
    type: application
    platform: iOS
    sources: 
      - $APP_NAME
      - Models
      - Views
    settings:
      PRODUCT_BUNDLE_IDENTIFIER: com.appmaker.$APP_NAME
      DEVELOPMENT_TEAM: ""
      INFOPLIST_FILE: Info.plist
schemes:
  $APP_NAME:
    build:
      targets:
        $APP_NAME: all
    run:
      config: Debug
    test:
      config: Debug
EOF

# Main app file
cat > "$APP_NAME/${APP_NAME}App.swift" << EOF
import SwiftUI
import SwiftData

@main
struct ${APP_NAME}App: App {
    var sharedModelContainer: ModelContainer = {
        let schema = Schema([
            Item.self,
        ])
        let modelConfiguration = ModelConfiguration(schema: schema, isStoredInMemoryOnly: false)

        do {
            return try ModelContainer(for: schema, configurations: [modelConfiguration])
        } catch {
            fatalError("Could not create ModelContainer: \\(error)")
        }
    }()

    var body: some Scene {
        WindowGroup {
            ContentView()
        }
        .modelContainer(sharedModelContainer)
    }
}
EOF

# Simple model that WORKS
cat > "Models/Item.swift" << 'EOF'
import Foundation
import SwiftData

@Model
final class Item {
    var title: String
    var details: String
    var isComplete: Bool
    var createdAt: Date
    
    init(title: String = "", details: String = "", isComplete: Bool = false) {
        self.title = title
        self.details = details
        self.isComplete = isComplete
        self.createdAt = Date()
    }
}
EOF

# ContentView that WORKS
cat > "Views/ContentView.swift" << 'EOF'
import SwiftUI
import SwiftData

struct ContentView: View {
    @Environment(\.modelContext) private var modelContext
    @Query(sort: \Item.createdAt, order: .reverse) private var items: [Item]
    @State private var showingAddItem = false

    var body: some View {
        NavigationStack {
            List {
                ForEach(items) { item in
                    NavigationLink {
                        ItemDetailView(item: item)
                    } label: {
                        ItemRow(item: item)
                    }
                }
                .onDelete(perform: deleteItems)
            }
            .navigationTitle("Items")
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(action: { showingAddItem.toggle() }) {
                        Label("Add Item", systemImage: "plus")
                    }
                }
            }
            .sheet(isPresented: $showingAddItem) {
                AddItemView()
            }
        }
    }

    private func deleteItems(offsets: IndexSet) {
        withAnimation {
            for index in offsets {
                modelContext.delete(items[index])
            }
        }
    }
}

struct ItemRow: View {
    let item: Item
    
    var body: some View {
        VStack(alignment: .leading) {
            Text(item.title)
                .font(.headline)
                .strikethrough(item.isComplete)
            if !item.details.isEmpty {
                Text(item.details)
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .lineLimit(1)
            }
        }
        .padding(.vertical, 4)
    }
}
EOF

# Detail view
cat > "Views/ItemDetailView.swift" << 'EOF'
import SwiftUI
import SwiftData

struct ItemDetailView: View {
    @Bindable var item: Item
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        Form {
            Section("Details") {
                TextField("Title", text: $item.title)
                TextField("Details", text: $item.details, axis: .vertical)
                    .lineLimit(3...6)
                Toggle("Complete", isOn: $item.isComplete)
            }
            
            Section("Info") {
                LabeledContent("Created", value: item.createdAt.formatted())
            }
        }
        .navigationTitle("Edit Item")
        .navigationBarTitleDisplayMode(.inline)
    }
}
EOF

# Add item view
cat > "Views/AddItemView.swift" << 'EOF'
import SwiftUI
import SwiftData

struct AddItemView: View {
    @Environment(\.modelContext) private var modelContext
    @Environment(\.dismiss) private var dismiss
    
    @State private var title = ""
    @State private var details = ""
    
    var body: some View {
        NavigationStack {
            Form {
                Section("New Item") {
                    TextField("Title", text: $title)
                    TextField("Details", text: $details, axis: .vertical)
                        .lineLimit(3...6)
                }
            }
            .navigationTitle("Add Item")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .cancellationAction) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
                ToolbarItem(placement: .confirmationAction) {
                    Button("Save") {
                        let newItem = Item(title: title, details: details)
                        modelContext.insert(newItem)
                        dismiss()
                    }
                    .disabled(title.isEmpty)
                }
            }
        }
    }
}
EOF

# README
cat > README.md << EOF
# $APP_NAME

Created with AppMaker

## Quick Start

\`\`\`bash
make dev       # Open in Xcode
make test      # Run tests  
make build     # Build app
make device    # Test on iPhone
\`\`\`

## App Store Workflow

\`\`\`bash
make appstore    # Prepare assets
make testflight  # Upload to TestFlight
make submit      # Submit to App Store
\`\`\`

Press Cmd+R to run the app.
EOF

# Create icon generation script
cat > scripts/generate_icon.sh << 'EOF'
#!/bin/bash
APP_NAME="$1"
ICON_DIR="Assets.xcassets/AppIcon.appiconset"

# Create a simple colored icon with app initial
mkdir -p "$ICON_DIR"

# Generate Contents.json for App Store icon
cat > "$ICON_DIR/Contents.json" << CONTENTS
{
  "images" : [
    {
      "filename" : "icon-1024.png",
      "idiom" : "universal",
      "platform" : "ios",
      "size" : "1024x1024"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}
CONTENTS

# Create placeholder icon (you'll replace this with a real icon)
touch "$ICON_DIR/icon-1024.png"
echo "✅ Icon placeholder created. Replace $ICON_DIR/icon-1024.png with your 1024x1024 app icon."
EOF

chmod +x scripts/generate_icon.sh

# Initialize git
git init -q
git add .
git commit -q -m "Initial commit"

echo -e "${GREEN}✅ Done!${NC}"
echo ""
echo "Next steps:"
echo "  cd $APP_NAME"
echo "  make dev"

# Generate and open
xcodegen generate -s project.yml >/dev/null 2>&1
open "$APP_NAME.xcodeproj"