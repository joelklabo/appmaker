#!/bin/bash

# AppMaker Ultimate - The Simplest iOS/macOS App Generator
# Usage: appmaker MyApp

set -euo pipefail

# Auto-detect everything
APP_NAME="${1:-}"
GIT_USER=$(git config user.name 2>/dev/null || echo "Developer")
GIT_EMAIL=$(git config user.email 2>/dev/null || echo "dev@example.com")
GIT_ORG=$(echo "$GIT_EMAIL" | cut -d@ -f2 | cut -d. -f1)
BUNDLE_PREFIX="com.${GIT_ORG}"
YEAR=$(date +%Y)

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

# Validate input
if [ -z "$APP_NAME" ]; then
    echo "Usage: appmaker YourAppName"
    exit 1
fi

if [[ ! "$APP_NAME" =~ ^[A-Za-z][A-Za-z0-9]*$ ]]; then
    echo "App name must start with a letter and contain only letters and numbers"
    exit 1
fi

# Check if directory exists
if [ -d "$APP_NAME" ]; then
    echo "Directory $APP_NAME already exists"
    exit 1
fi

# Start the magic
echo -e "${BLUE}✨ Creating $APP_NAME...${NC}"

# Create all directories
mkdir -p "$APP_NAME"/{$APP_NAME,Packages/$APP_NAME,Tests,scripts,ci_scripts}
mkdir -p "$APP_NAME/$APP_NAME"/{Views,Models,Services,Resources}
mkdir -p "$APP_NAME/$APP_NAME/Resources"/{Assets.xcassets,Preview\ Content}
mkdir -p "$APP_NAME/Packages/$APP_NAME"/{Sources,Tests}
mkdir -p "$APP_NAME/Packages/$APP_NAME/Sources"/{$APP_NAME,Models,Services,Store}

cd "$APP_NAME"

# Create .gitignore
cat > .gitignore << 'EOF'
.DS_Store
*.xcuserstate
xcuserdata/
.build/
DerivedData/
*.xcodeproj
!*.xcodeproj/project.pbxproj
!*.xcodeproj/xcshareddata/
*.playground/
.swiftpm/
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
EOF

# Create Makefile
cat > Makefile << EOF
# $APP_NAME - Generated by AppMaker
.PHONY: all dev test build clean

all: dev

dev:
	@xcodegen generate -s project.yml >/dev/null 2>&1
	@echo "✅ Project ready!"
	@echo ""
	@echo "Commands:"
	@echo "  make test  - Run tests"
	@echo "  make build - Build app"
	@echo "  make clean - Clean build"
	@echo ""
	@open $APP_NAME.xcodeproj

test:
	@xcodebuild test -scheme $APP_NAME -destination 'platform=iOS Simulator,name=iPhone 16' -quiet

build:
	@xcodebuild build -scheme $APP_NAME -destination 'platform=iOS Simulator,name=iPhone 16' -quiet

clean:
	@rm -rf .build DerivedData ~/Library/Developer/Xcode/DerivedData/$APP_NAME-*
EOF

# Create project.yml
cat > project.yml << EOF
name: $APP_NAME
options:
  bundleIdPrefix: $BUNDLE_PREFIX
  deploymentTarget:
    iOS: "18.0"
    macOS: "15.0"
settings:
  DEVELOPMENT_TEAM: ""
  ENABLE_USER_SCRIPT_SANDBOXING: NO
packages:
  $APP_NAME:
    path: Packages/$APP_NAME
targets:
  $APP_NAME:
    type: application
    platform: iOS
    sources: [$APP_NAME]
    resources:
      - $APP_NAME/Resources
    settings:
      INFOPLIST_FILE: $APP_NAME/Info.plist
      CODE_SIGN_ENTITLEMENTS: $APP_NAME/$APP_NAME.entitlements
    dependencies:
      - package: $APP_NAME
EOF

# Create Package.swift
cat > "Packages/$APP_NAME/Package.swift" << EOF
// swift-tools-version: 6.0
import PackageDescription

let package = Package(
    name: "$APP_NAME",
    platforms: [.iOS(.v18), .macOS(.v15)],
    products: [
        .library(name: "$APP_NAME", targets: ["$APP_NAME"])
    ],
    targets: [
        .target(name: "$APP_NAME", dependencies: ["Models", "Services", "Store"]),
        .target(name: "Models"),
        .target(name: "Services", dependencies: ["Models"]),
        .target(name: "Store", dependencies: ["Models"]),
        .testTarget(name: "${APP_NAME}Tests", dependencies: ["$APP_NAME"])
    ]
)
EOF

# Create main app file
cat > "$APP_NAME/${APP_NAME}App.swift" << EOF
import SwiftUI
import SwiftData
import $APP_NAME
import Models
import Store

@main
struct ${APP_NAME}App: App {
    let container: ModelContainer
    
    init() {
        do {
            container = try createModelContainer()
        } catch {
            fatalError("Failed to create ModelContainer: \\(error)")
        }
    }
    
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
        .modelContainer(container)
    }
}
EOF

# Create ContentView
cat > "$APP_NAME/Views/ContentView.swift" << EOF
import SwiftUI
import SwiftData
import Models

struct ContentView: View {
    @Query private var items: [Item]
    @Environment(\.modelContext) private var context
    
    var body: some View {
        NavigationStack {
            List {
                ForEach(items) { item in
                    HStack {
                        Text(item.name)
                        Spacer()
                        Text(item.createdAt, style: .time)
                            .font(.caption)
                            .foregroundStyle(.secondary)
                    }
                }
                .onDelete { indexes in
                    for index in indexes {
                        context.delete(items[index])
                    }
                }
            }
            .navigationTitle("$APP_NAME")
            .toolbar {
                Button("Add Item") {
                    let item = Item(name: "Item #\\(items.count + 1)")
                    context.insert(item)
                }
            }
        }
    }
}

#Preview {
    ContentView()
        .modelContainer(for: Item.self, inMemory: true)
}
EOF

# Create a model
cat > "Packages/$APP_NAME/Sources/Models/Item.swift" << EOF
import Foundation
import SwiftData

@Model
public final class Item {
    public var id = UUID()
    public var name: String
    public var createdAt: Date
    
    public init(name: String) {
        self.name = name
        self.createdAt = Date()
    }
}

extension Item: Identifiable {}
EOF

# Create a service
cat > "Packages/$APP_NAME/Sources/Services/ItemService.swift" << EOF
import Foundation
import Models

public actor ItemService {
    public init() {}
    
    public func createItem(name: String) -> Item {
        Item(name: name)
    }
}
EOF

# Create store
cat > "Packages/$APP_NAME/Sources/Store/Store.swift" << EOF
import SwiftData
import Models

public func createModelContainer() throws -> ModelContainer {
    try ModelContainer(for: Item.self)
}
EOF

# Create main package file
cat > "Packages/$APP_NAME/Sources/$APP_NAME/${APP_NAME}.swift" << EOF
import Foundation

public struct $APP_NAME {
    public static let version = "1.0.0"
    public init() {}
}
EOF

# Create test
cat > "Packages/$APP_NAME/Tests/${APP_NAME}Tests/BasicTests.swift" << EOF
import Testing
@testable import $APP_NAME

@Test func appInitializes() {
    let app = $APP_NAME()
    #expect(app != nil)
}
EOF

# Create README
cat > README.md << EOF
# $APP_NAME

Created with AppMaker on $(date +"%B %d, %Y")

## Quick Start

\`\`\`bash
make dev
\`\`\`

## Features

- ✅ SwiftUI + Swift 6
- ✅ iOS & macOS ready  
- ✅ SwiftData configured
- ✅ Modular architecture
- ✅ Testing configured
- ✅ Ready to customize

## Next Steps

1. Add your app logic in \`Views/\`
2. Define models in \`Packages/$APP_NAME/Sources/Models/\`  
3. Add services in \`Packages/$APP_NAME/Sources/Services/\`
4. Run tests with \`make test\`

Created by $GIT_USER
EOF

# Create CLAUDE.md
cat > CLAUDE.md << EOF
# $APP_NAME - AI Development Guide

## Quick Reference
- **Language**: Swift 6, SwiftUI
- **Architecture**: Model-View with Services
- **Key Command**: \`make test\` after changes

## Project Structure
\`\`\`
$APP_NAME/           # UI Layer (SwiftUI Views)
Packages/$APP_NAME/  # Business Logic
  - Models/          # SwiftData models  
  - Services/        # Business logic (actors)
  - Store/           # Data persistence
\`\`\`

## Development Workflow
1. Make changes
2. Run \`make test\`
3. Fix any issues
4. Commit when green

## Key Patterns
- Use actors for thread safety
- SwiftData for persistence
- No ViewModels (MV pattern)
- Dependency injection via environment
EOF

# Create entitlements
cat > "$APP_NAME/$APP_NAME.entitlements" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>com.apple.security.app-sandbox</key>
    <true/>
    <key>com.apple.security.files.user-selected.read-write</key>
    <true/>
</dict>
</plist>
EOF

# Create .swiftlint.yml
cat > .swiftlint.yml << 'EOF'
disabled_rules:
  - trailing_comma
  - todo
opt_in_rules:
  - empty_count
  - closure_end_indentation
  - sorted_imports
excluded:
  - .build
  - DerivedData
  - "*.xcodeproj"
line_length:
  warning: 120
  error: 200
EOF

# Create Info.plist
cat > "$APP_NAME/Info.plist" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleDisplayName</key>
    <string>$APP_NAME</string>
    <key>CFBundleName</key>
    <string>$APP_NAME</string>
</dict>
</plist>
EOF

# Initialize git
git init -q
git add .
git commit -q -m "Initial commit - $APP_NAME created with AppMaker"

# Final output
echo -e "${GREEN}✅ $APP_NAME created successfully!${NC}"
echo ""
echo "Opening Xcode..."

# Auto-open Xcode
xcodegen generate -s project.yml >/dev/null 2>&1
open "$APP_NAME.xcodeproj"

echo ""
echo "Next steps:"
echo "  1. Press Cmd+R to run"
echo "  2. Start building your app!"
echo ""
echo "Useful commands:"
echo "  make test  - Run tests"
echo "  make build - Build app"
echo "  make clean - Clean build"